Python 2.7.18rc1 (v2.7.18rc1:7a41638b5b, Apr  6 2020, 11:31:55) [MSC v.1500 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license()" for more information.
>>> age=(12,10,1) * 3
>>> age
(12, 10, 1, 12, 10, 1, 12, 10, 1)
>>> age={12,10,1} * 3

Traceback (most recent call last):
  File "<pyshell#2>", line 1, in <module>
    age={12,10,1} * 3
TypeError: unsupported operand type(s) for *: 'set' and 'int'
>>> age={12,10,1} + 3

Traceback (most recent call last):
  File "<pyshell#3>", line 1, in <module>
    age={12,10,1} + 3
TypeError: unsupported operand type(s) for +: 'set' and 'int'
>>> >>>age=(12,10,1) + 3
SyntaxError: invalid syntax
>>> >>>age=(12,10,1) + 3
SyntaxError: invalid syntax
>>> >>>age=[12,10,1] + 3
SyntaxError: invalid syntax
>>> age=[10,5,7,8] + 3

Traceback (most recent call last):
  File "<pyshell#7>", line 1, in <module>
    age=[10,5,7,8] + 3
TypeError: can only concatenate list (not "int") to list
>>> age=[10,5,7,8] + [3,12,4,65]
>>> age
[10, 5, 7, 8, 3, 12, 4, 65]
>>> age=[10,5,7,8] + [3,12,4,65,6,76]
>>> age
[10, 5, 7, 8, 3, 12, 4, 65, 6, 76]
>>> age=(10,5,7,8) + (3,12,4,65,6,76)
>>> age
(10, 5, 7, 8, 3, 12, 4, 65, 6, 76)
>>> type(age)
<type 'tuple'>
>>> age=(10,5,7,8,'tom',True) + (3,12,4,65,6,76,'name')
>>> age
(10, 5, 7, 8, 'tom', True, 3, 12, 4, 65, 6, 76, 'name')
>>> age[3] = 25

Traceback (most recent call last):
  File "<pyshell#17>", line 1, in <module>
    age[3] = 25
TypeError: 'tuple' object does not support item assignment
>>> country[12, 4 ,6,90]

Traceback (most recent call last):
  File "<pyshell#18>", line 1, in <module>
    country[12, 4 ,6,90]
NameError: name 'country' is not defined
>>> country= [12, 4 ,6,90]
>>> typE(country)

Traceback (most recent call last):
  File "<pyshell#20>", line 1, in <module>
    typE(country)
NameError: name 'typE' is not defined
>>> country= [12, 4 ,6,90]
>>> type(country)
>>> country= [12, 4 ,6,90]
>>> type(country)
>>> type (country)
<type 'list'>
>>> country= [12, 4 ,6,90]
>>> type(country)
>>> country= [12, 4 ,6,90]
>>> type (country)
>>> country = [12,4,6,90]
>>> type(country)
>>> type(country)
<type 'list'>
>>> type(country)
<type 'list'>
>>> country = [12,4,6,90]
>>> type(country)
>>> country = [12,4,6,90]
>>> type(country)
>>> type(country)
<type 'list'>
>>> expr = 10 + 20 * 30
print(expr)
>>> expr = 10 + 20 * 30
>>> expr
610
>>> expr = 10 + 20 * 30
>>> print(expr)
610
>>> name = "Alex"
age = 0
  
if name == "Alex" or name == "John" and age >= 2:
    print("Hello! Welcome.")
    
>>> name = "Alex"
>>> age = 0
>>> if name == "Alex" or name == "John" and age >= 2
SyntaxError: invalid syntax
>>> if name == "Alex" or name == "John" and age >= 2;
SyntaxError: invalid syntax
>>> 
>>> name = "Alex"
>>> age = 0
>>> if name == "Alex" or name =="John" and age >= 2
SyntaxError: invalid syntax
>>> name == "Alex" or name =="John" and age >= 2
True
>>> if name == "Alex" or name =="John" and age >= 2:
	print ("Yes")
else:
	print("No")

	
Yes
>>> name = "Nitya"
>>> if name == "Alex" or name =="John" and age >= 2:
	print ("Yes")
else:
	print("No")

	
No
>>> >>> # Python program to demonstrate nested ternary operator
>>> a, b = 10, 20
>>> print ("Both a and b are equal" if a == b else "a is greater than b"
        if a > b else "b is greater than a")
b is greater than a
>>> if a != b:
    if a > b:
        print("a is greater than b")
    else:
        print("b is greater than a")
else:
    print("Both a and b are equal")a, b = 10, 20a, b = 10, 20
    
SyntaxError: invalid syntax
>>> a, b = 10, 20
>>> if a != b:
    if a > b:
        print("a is greater than b")
    else:
        print("b is greater than a")
else:
    print("Both a and b are equal")

    
b is greater than a
>>> a, b = 10,10
>>> if a != b:
    if a > b:
        print("a is greater than b")
    else:
        print("b is greater than a")
else:
    print("Both a and b are equal")

    
Both a and b are equal
>>> a, b = 10,130
>>> min = a < b and a or b
  print(min)
  
>>> 
>>> a, b = 10,130
>>> if min = a< b and a or b
SyntaxError: invalid syntax
>>> a, b = 10,130
>>> if min = a< b and a or b:
	
SyntaxError: invalid syntax
>>> a, b = 10, 20
>>> min = a < b and a or b
>>> print(min)
10
>>> a, b = 10,130min = a < b and a or b
SyntaxError: invalid syntax
>>> a, b = 10,130min = a < b and a or b
  print(min)a, b = 10,130
  
SyntaxError: invalid syntax
>>> 
>>> a, b = 10,130if min = a< b and a or b
SyntaxError: invalid syntax
>>> 
>>> a, b = 10,130
>>> min = a < b and a or b
  print(min)
  
>>> 
>>> print(min)
10
>>> t = (5,'program', 1+3j)
>>> print("t[1] = ", t[1])
('t[1] = ', 'program')
>>> print("t[0:3] = ", t[0:3])
('t[0:3] = ', (5, 'program', (1+3j)))
>>> t[0] = 10

Traceback (most recent call last):
  File "<pyshell#94>", line 1, in <module>
    t[0] = 10
TypeError: 'tuple' object does not support item assignment
>>> a = {1,2,2,3,3,3}
print(a)
>>> 
>>> print(a)
set([1, 2, 3])
>>> a =  {1, 2, 3, 4, 5}
<class 'set'>
>>> class 'set'
SyntaxError: invalid syntax
>>> <class 'set'>
SyntaxError: invalid syntax
>>>  set([1,2,3])
 
  File "<pyshell#101>", line 2
    set([1,2,3])
    ^
IndentationError: unexpected indent
>>> set([1,2,3])
set([1, 2, 3])
>>> tuple({5,6,7})
(5, 6, 7)
>>> tuple([5,6,7])
(5, 6, 7)
>>> set({1,2,3)
    
SyntaxError: invalid syntax
}
>>> set({1,2,3})
set([1, 2, 3])
>>> list('hello')
['h', 'e', 'l', 'l', 'o']
>>> set('hello')
set(['h', 'e', 'l', 'o'])
>>> tuple('hello')
('h', 'e', 'l', 'l', 'o')
>>> ('hello')
'hello'
>>> 